{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a la Documentaci\u00f3n de Laica","text":"<p>Este sitio recoge toda la documentaci\u00f3n t\u00e9cnica y funcional relacionada con el proyecto Laica, incluyendo:</p> <ul> <li>Arquitectura general del sistema</li> <li>Descripci\u00f3n de componentes m\u00f3viles y backend</li> <li>Manual t\u00e9cnico de desarrollo</li> <li>Flujos de interacci\u00f3n con dispositivos BLE</li> <li>Proceso de autenticaci\u00f3n y sincronizaci\u00f3n de datos</li> </ul> <p>Puedes navegar usando el men\u00fa lateral para acceder a cada secci\u00f3n.</p> <p>\u00daltima actualizaci\u00f3n: junio 2025</p>"},{"location":"arquitectura/","title":"Arquitectura del Proyecto Laica","text":"<p>La arquitectura de Laica se basa en una estructura modular que combina dispositivos f\u00edsicos (como collares y estaci\u00f3n base), una aplicaci\u00f3n m\u00f3vil desarrollada en React Native, y una API backend centralizada.</p>"},{"location":"arquitectura/#componentes-principales","title":"Componentes principales","text":"<ul> <li>Aplicaci\u00f3n m\u00f3vil (React Native + Expo): gestiona usuarios, mascotas, collares y sincroniza datos.</li> <li>Collar Laica (BLE): dispositivo con sensores que transmite datos IMU, bater\u00eda y eventos.</li> <li>Base Laica (BLE + WiFi): punto intermedio opcional para conexi\u00f3n local a la red.</li> <li>Backend API (HTTPs): centraliza y almacena la informaci\u00f3n sincronizada desde la app.</li> <li>Firebase: para autenticaci\u00f3n, almacenamiento de im\u00e1genes y notificaciones push.</li> </ul>"},{"location":"arquitectura/#diagrama-general","title":"Diagrama general","text":"<p>(Agrega aqu\u00ed un enlace a una imagen o diagrama si lo necesitas)</p>"},{"location":"arquitectura/#documentacion-adicional","title":"Documentaci\u00f3n adicional","text":"<p>\ud83d\udcce Descargar documento adjunto sobre arquitectura en PDF</p> <p>Este documento contiene informaci\u00f3n complementaria sobre la estructura t\u00e9cnica y fundamentos del sistema Laica.</p>"},{"location":"manual-t%C3%A9cnico/","title":"Inventario T\u00e9cnico \u2013 Aplicaci\u00f3n M\u00f3vil Laica","text":""},{"location":"manual-t%C3%A9cnico/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Este documento presenta un inventario t\u00e9cnico detallado de los componentes, librer\u00edas y funciones clave que conforman la aplicaci\u00f3n m\u00f3vil Laica, desarrollada en React Native utilizando Expo. Esta aplicaci\u00f3n tiene como objetivo permitir a los usuarios gestionar la informaci\u00f3n de sus mascotas y de los dispositivos asociados (como collares inteligentes), todo ello mediante una interfaz intuitiva y conectada con servicios en la nube.</p>"},{"location":"manual-t%C3%A9cnico/#2-componentes-tecnicos-principales","title":"2. Componentes T\u00e9cnicos Principales","text":""},{"location":"manual-t%C3%A9cnico/#21-interfaz-de-usuario-ui-layer","title":"2.1 Interfaz de Usuario (UI Layer)","text":"<p>La capa de presentaci\u00f3n de la aplicaci\u00f3n est\u00e1 compuesta por pantallas organizadas bajo una estructura de rutas utilizando <code>expo-router</code>. Las rutas se agrupan por contexto de autenticaci\u00f3n (usuarios autenticados y no autenticados) y se organizan en pesta\u00f1as, pantallas principales y modales.</p> <p>Los componentes reutilizables se ubican en el directorio <code>components/</code>, organizados en subdirectorios como:</p> <ul> <li><code>primitives/</code>: Botones, inputs, texto, vistas, iconos.</li> <li><code>forms/</code>: Formularios multietapa y campos validados.</li> <li><code>cards/</code>, <code>dialogs/</code>, <code>modals/</code>, <code>feedback/</code>, <code>layout/</code></li> </ul> <p>El sistema de estilos est\u00e1 gestionado con NativeWind, que permite el uso de Tailwind CSS en React Native. La configuraci\u00f3n est\u00e1 centralizada en <code>tailwind.config.js</code>.</p>"},{"location":"manual-t%C3%A9cnico/#22-gestion-de-estado-global","title":"2.2 Gesti\u00f3n de Estado Global","text":"<p>La gesti\u00f3n del estado de la aplicaci\u00f3n se realiza mediante la librer\u00eda <code>@legendapp/state</code>, con persistencia local utilizando <code>@legendapp/state-persist-mmkv</code>. Esto permite que los datos observables est\u00e9n sincronizados y sean reactivamente actualizados.</p> <p>Algunos stores clave incluyen:</p> <ul> <li><code>userStore$</code></li> <li><code>petsStore$</code></li> <li><code>collarsStore$</code></li> <li><code>permissionsStore$</code></li> <li><code>modalStore$</code></li> <li><code>formStore$</code></li> </ul>"},{"location":"manual-t%C3%A9cnico/#23-hooks-personalizados","title":"2.3 Hooks Personalizados","text":"<p>Se han desarrollado hooks personalizados para encapsular l\u00f3gica compleja y promover la reutilizaci\u00f3n del c\u00f3digo. Algunos ejemplos incluyen:</p> <ul> <li><code>useAuth</code>: para autenticaci\u00f3n.</li> <li><code>useBleScanner</code>, <code>useBleDevice</code>, <code>useBleImu</code>: para interacci\u00f3n con dispositivos BLE.</li> <li><code>usePermissions</code>, <code>useNotifications</code>: para permisos del sistema.</li> <li><code>useLanguage</code>: para internacionalizaci\u00f3n y selecci\u00f3n de idioma.</li> </ul>"},{"location":"manual-t%C3%A9cnico/#3-librerias-y-herramientas-utilizadas","title":"3. Librer\u00edas y Herramientas Utilizadas","text":""},{"location":"manual-t%C3%A9cnico/#31-frameworks-y-arquitectura","title":"3.1 Frameworks y Arquitectura","text":"<ul> <li>React Native y Expo (con <code>expo-router</code> para navegaci\u00f3n)</li> <li>TypeScript como lenguaje base</li> <li>Legend State para gesti\u00f3n reactiva del estado</li> <li>NativeWind / Tailwind CSS para estilos</li> </ul>"},{"location":"manual-t%C3%A9cnico/#32-comunicacion-y-manejo-de-datos","title":"3.2 Comunicaci\u00f3n y Manejo de Datos","text":"<ul> <li><code>axios</code>: Cliente HTTP con interceptores personalizados</li> <li><code>@tanstack/react-query</code>: Para consultas, cacheo, invalidaciones y sincronizaci\u00f3n de datos</li> <li><code>react-hook-form</code> + <code>zod</code>: Para validaci\u00f3n robusta de formularios</li> <li><code>@react-native-firebase/auth</code>: Autenticaci\u00f3n con Firebase</li> <li><code>@react-native-firebase/storage</code>: Para manejo de archivos como fotos de mascotas</li> </ul>"},{"location":"manual-t%C3%A9cnico/#33-interaccion-con-dispositivos-ble","title":"3.3 Interacci\u00f3n con Dispositivos BLE","text":"<ul> <li><code>react-native-ble-plx</code>: Manejo de dispositivos Bluetooth Low Energy</li> <li>Definici\u00f3n de UUIDs espec\u00edficos en <code>constants/bluetooth.ts</code></li> <li>Comunicaci\u00f3n estructurada mediante caracter\u00edsticas BLE para sincronizaci\u00f3n, configuraci\u00f3n y lectura de datos IMU</li> </ul>"},{"location":"manual-t%C3%A9cnico/#4-funcionalidades-relevantes","title":"4. Funcionalidades Relevantes","text":"<p>La aplicaci\u00f3n implementa una variedad de flujos funcionales organizados de manera estructurada:</p> <ul> <li>Autenticaci\u00f3n de Usuarios: Con flujos separados para email/contrase\u00f1a, Google y Apple, gestionados por Firebase.</li> <li>Onboarding: Secuencia de pantallas para configuraci\u00f3n inicial del usuario y su primera mascota.</li> <li>Gesti\u00f3n de Mascotas: CRUD completo, incluyendo salud, vacunas y comportamientos.</li> <li>Vinculaci\u00f3n BLE: Emparejamiento con collares Laica, sincronizaci\u00f3n de datos IMU, configuraci\u00f3n de reloj, clave p\u00fablica, descarga de logs v\u00eda comandos (ej. <code>BLEDL</code>, <code>IMUSYNC</code>).</li> <li>Configuraci\u00f3n WiFi de la Estaci\u00f3n Base: Escritura de SSID y contrase\u00f1a a caracter\u00edsticas BLE espec\u00edficas.</li> <li>Visualizaci\u00f3n de Datos: Actividad f\u00edsica, salud, localizaci\u00f3n del collar, mediante gr\u00e1ficas y res\u00famenes.</li> <li>Notificaciones Push: Manejo con <code>expo-notifications</code>.</li> <li>Soporte Multilenguaje: Internacionalizaci\u00f3n con <code>i18next</code>.</li> </ul>"}]}